{{- if or (eq .Values.logs.persistence.type "gcp") (eq .Values.logs.persistence.type "azure") }}
apiVersion: v1
kind: Service
metadata:
  name: {{ include "platformMonitoring.s3proxy.fullname" . }}
  labels: {{ include "platformMonitoring.labels.standard" . | nindent 4 }}
    service: s3proxy
spec:
  type: ClusterIP
  ports:
  - name: http
    port: {{ .Values.s3proxy.port }}
    targetPort: http
  selector:
    app: {{ include "platformMonitoring.name" . }}
    release: {{ .Release.Name | quote }}
    service: s3proxy
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "platformMonitoring.s3proxy.fullname" . }}
  labels: {{ include "platformMonitoring.labels.standard" . | nindent 4 }}
    service: s3proxy
spec:
  replicas: {{ .Values.s3proxy.replicas }}
  selector:
    matchLabels:
      app: {{ include "platformMonitoring.name" . }}
      release: {{ .Release.Name | quote }}
      service: s3proxy
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ include "platformMonitoring.name" . }}
        release: {{ .Release.Name | quote }}
        service: s3proxy
      annotations:
        checksum/logs-secret: {{ include (print $.Template.BasePath "/logs-storage-key-secret.yaml") . | sha256sum }}
{{- if .Values.s3proxy.podAnnotations }}
{{ toYaml .Values.s3proxy.podAnnotations | indent 8 }}
{{- end }}
    spec:
      containers:
      - name: s3proxy
        {{- with .Values.s3proxy.image }}
        image: {{ .repository }}:{{ .tag }}
        {{- end }}
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 10
          periodSeconds: 3
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 10
          periodSeconds: 3
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        ports:
          - name: http
            containerPort: {{ .Values.s3proxy.port }}
            protocol: TCP
        {{- if .Values.s3proxy.resources }}
        resources: {{ toYaml .Values.s3proxy.resources | nindent 10 }}
        {{- end }}
        env:
        - name: S3PROXY_ENDPOINT
          value: {{ printf "http://0.0.0.0:%s" .Values.s3proxy.port }}
        - name: S3PROXY_IDENTITY
          value: {{ .Values.s3proxy.identity }}
        - name: S3PROXY_CREDENTIAL
          value: {{ .Values.s3proxy.credential }}
        {{- if eq .Values.logs.persistence.type "gcp" }}
        - name: JCLOUDS_PROVIDER
          value: google-cloud-storage
        - name: JCLOUDS_IDENTITY
          value: json-key
        - name: JCLOUDS_CREDENTIAL
          value: /etc/config/s3proxy/key_json
        volumeMounts:
        - name: gcs-credentials
          mountPath: /etc/config/s3proxy
        {{- else if eq .Values.logs.persistence.type "azure" }}
        - name: JCLOUDS_PROVIDER
          value: azureblob
        - name: JCLOUDS_ENDPOINT
          value: {{ printf "https://%s.blob.core.windows.net" .Values.logs.persistence.azure.storageAccountName }}
        - name: JCLOUDS_IDENTITY
          value: {{ .Values.logs.persistence.azure.storageAccountName }}
        - name: JCLOUDS_CREDENTIAL
          valueFrom:
            secretKeyRef:
              name: {{ include "platformMonitoring.logs.storage.keySecret" . }}
              key: account_key
        {{- end }}
      volumes:
      {{- if eq .Values.logs.persistence.type "gcp" }}
      - name: gcs-credentials
        secret:
          secretName: {{ include "platformMonitoring.logs.storage.keySecret" . }}
      {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets: {{ toYaml .Values.imagePullSecrets | nindent 6 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
{{- end }}
