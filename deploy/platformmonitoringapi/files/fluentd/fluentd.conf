# TCP input to receive logs from
<source>
    @type forward
    bind 0.0.0.0
    port {{ .Values.fluentd.forwardPort }}
</source>

# HTTP input for the liveness and readiness probes
<source>
    @type http
    bind 0.0.0.0
    port 9880
</source>

# Ignore fluentd own events
<match fluent.**>
    @type null
</match>

# Throw the healthcheck to the standard output instead of forwarding it
<match fluentd.healthcheck>
    @type stdout
</match>

# Send the logs to S3
<match **>
    @type s3

{{- if eq .Values.logs.persistence.type "aws" }}
{{- if .Values.logs.persistence.aws.access_key_id }}
    aws_key_id "#{ENV['S3_ACCESS_KEY_ID']}"
{{- end }}
{{- if .Values.logs.persistence.aws.secret_access_key }}
    aws_sec_key "#{ENV['S3_SECRET_ACCESS_KEY']}"
{{- end }}
{{- if .Values.logs.persistence.aws.region }}
    s3_region {{ .Values.logs.persistence.aws.region }}
{{- end }}
    s3_bucket {{ .Values.logs.persistence.aws.bucket }}
{{- if .Values.logs.persistence.aws.url }}
    s3_endpoint {{ .Values.logs.persistence.aws.url }}
{{- end }}
{{- if .Values.logs.persistence.aws.forcePathStyle }}
    force_path_style {{ .Values.logs.persistence.aws.forcePathStyle }}
{{- end }}
{{- end }}

{{- if eq .Values.logs.persistence.type "gcp" }}
    aws_key_id "#{ENV['S3_ACCESS_KEY_ID']}"
    aws_sec_key "#{ENV['S3_SECRET_ACCESS_KEY']}"
    s3_region {{ .Values.logs.persistence.gcp.location }}
    s3_bucket {{ .Values.logs.persistence.gcp.bucket }}
    s3_endpoint http://localhost:{{ .Values.minio.port }}
    force_path_style true
{{- end }}

{{- if eq .Values.logs.persistence.type "azure" }}
    aws_key_id "#{ENV['S3_ACCESS_KEY_ID']}"
    aws_sec_key "#{ENV['S3_SECRET_ACCESS_KEY']}"
    s3_region minio
    s3_bucket {{ .Values.logs.persistence.azure.bucket }}
    s3_endpoint http://localhost:{{ .Values.minio.port }}
    force_path_style true
{{- end }}

{{- if eq .Values.logs.persistence.type "minio" }}
    aws_key_id "#{ENV['S3_ACCESS_KEY_ID']}"
    aws_sec_key "#{ENV['S3_SECRET_ACCESS_KEY']}"
    s3_region {{ .Values.logs.persistence.minio.region }}
    s3_bucket {{ .Values.logs.persistence.minio.bucket }}
    s3_endpoint {{ .Values.logs.persistence.minio.url }}
    force_path_style true
{{- end }}

    path ${tag}/
    store_as gzip
    s3_object_key_format %{path}%{time_slice}_%{index}.%{file_extension}

    <format>
        @type json
    </format>

    <buffer tag,time>
        @type file

        path /opt/bitnami/fluentd/logs/buffers
        chunk_limit_size {{ .Values.fluentd.s3.buffer.chunkLimitSize | default "8M" }}

        flush_thread_count {{ .Values.fluentd.s3.buffer.flushThreadCount | default "1" }}

        timekey {{ .Values.fluentd.s3.buffer.timeKey | default "1m" }}
        timekey_wait {{ .Values.fluentd.s3.buffer.timeKeyWait | default "1m" }}
        timekey_use_utc true
    </buffer>
</match>
